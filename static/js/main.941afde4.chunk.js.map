{"version":3,"sources":["ForecastView.bmp","logo.svg","style.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","wholeViewStyle","height","width","App","className","style","Navbar","expand","variant","bg","Container","Brand","Nav","Link","href","active","src","forecast","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,0C,4ECA3CD,EAAOC,QAAU,IAA0B,kC,gICA9BC,EAAiB,CAC5BC,OAAQ,OACRC,MAAO,Q,sCC6CMC,MAvCf,WACE,OACE,yBAAKC,UAAU,YAAYC,MAAOL,GAChC,kBAACM,EAAA,EAAD,CAAQC,OAAO,KAAKC,QAAQ,QAAQC,GAAG,SACvC,kBAACC,EAAA,EAAD,KACI,kBAACJ,EAAA,EAAOK,MAAR,2BACE,kBAACC,EAAA,EAAD,CAAKR,UAAU,UAAUI,QAAQ,QAC/B,kBAACI,EAAA,EAAIC,KAAL,CAAUC,KAAK,qDAAf,iBACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,8CAA8CC,QAAM,GAAnE,YAIR,0CACQ,uBAAGX,UAAU,aAAb,8LAKA,6CAGA,uBAAGA,UAAU,aAAb,uhBASA,yBAAKY,IAAKC,IAAUf,MAAM,MAAMD,OAAO,MAAMG,UAAU,QAAQc,IAAI,mCACzE,4CACA,uBAAGd,UAAU,aAAb,qLC5BYe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.941afde4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ForecastView.9ee00d8d.bmp\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const wholeViewStyle = {\r\n  height: '100%',\r\n  width: '100%'\r\n};","import React from 'react';\nimport logo from './logo.svg';\nimport forecast from './ForecastView.bmp';\nimport {wholeViewStyle} from './style';\nimport './App.css';\nimport {Navbar,Container,Nav} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"wholeView\" style={wholeViewStyle}>\n      <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n      <Container>\n          <Navbar.Brand>COVID-19 Trend Viz</Navbar.Brand>\n            <Nav className=\"mr-auto\" variant=\"tabs\">\n              <Nav.Link href=\"https://weiluo0001.github.io/COVID-19-Prediction/\">Forecast View</Nav.Link>\n              <Nav.Link href=\"https://weiluo0001.github.io/covid19-about/\" active>About</Nav.Link>\n            </Nav>\n        </Container>\n      </Navbar>\n      <h2> Overview </h2>\n              <p className=\"paragraph\">\n              COVID-19 Trend Viz is a visual analytics platform used to explore\n              COVID-19 incidence and prediction over space and time. Currently, one\n              view has been implemented in the system. They are:  \n              </p>\n              <h5>\n              Forecast View\n              </h5>\n              <p className=\"paragraph\">\n              This view shows COVID-19 incidence for different province in China. Users \n              can click on each hexagon on the map to update the other two views \n              for each specific province. Users can mouse over the timeline at the bottom\n              to check the 2 day prediction based on our predictive models. On the\n              dropdown menus, users can switch to the cumulative cases. The heatmap view on the top left shows the list of \n              cities which is experience high risk of COVID-19 outbreak. The heatmap \n              view will change accordingly while users mouse over the timeline.   \n              </p>\n              <img src={forecast} width=\"50%\" height=\"50%\" className=\"image\" alt=\"Global Dengue Timing/Wave View\"/>        \n        <h2> References </h2>\n        <p className=\"reference\">\n        1. W. Luo, M. S. Majumder, D. Liu, C. Poirier, K. D. Mandl, M. Lipsitch, M. Santillana. The role of absolute humidity on transmission rates of the COVID-19 outbreak. MedRxiv .  \n        </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}